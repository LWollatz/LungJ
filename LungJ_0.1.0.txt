var LJ_version = "0.1.0";
var LJ_dir = getDirectory("imagej") + "/macros/LungJ";
var LJ_isNew = true;

var LJ_srcFilename = "";
var LJ_srcDirectory = "";
var LJ_clsDirectory = LJ_dir;
var LJ_clsFilename = "";
var LJ_prbFilename = "";
var LJ_mapFilename = "";
var LJ_segFilename = "";
var LJ_win_Top = 20;
var LJ_win_Left = 20;
var LJ_win_Height = 20;
var LJ_win_Width = 20;
var LJ_win_Spacing = 60;
var LJ_clsName = "";
var LJ_Threshold = 0.2;
var LJ_srcID = 1;
var LJ_prbID = 1;
var LJ_mapID = 1;
var LJ_segID = 1;
var LJ_opt_Autosave = true;
var LJ_opt_MakeSegment = true;
var LJ_opt_MakeVideo = false;
var LJ_opt_UseDefaultBin = false;






/*
macro "Reload LungJ" {
	LJ_isNew = true;
	startup();
}
*/

/*** CORE FUNCTIONALITY ***/




macro "Display LungJ Status" {
	startup();
	msg = "LungJ Initiated for " + LJ_srcFilename + " with " + LJ_clsName + ".\n";
	msg += "Details:\n";
	msg += "Image:        " + LJ_srcDirectory+"\\"+LJ_srcFilename+"\n";
	msg += "Classifier:   " + LJ_clsDirectory+"\\"+LJ_clsFilename +"\n";
	if (LJ_opt_UseDefaultBin){
		msg += "Threshold:    " + "auto" + "\n";
	}else{
		msg += "Threshold:    " + (100*LJ_Threshold) + "%\n";
	}
	msg += "Segmentation: " + LJ_opt_MakeSegment +"\n";
	msg += "Video:        " + LJ_opt_MakeVideo +"\n";
	msg += "Autosave:     " + LJ_opt_Autosave +"\n";
	status = "NOT INITIATED";
	if (LJ_srcID != 1){
		status = "Initiated";
	}
	if (LJ_prbID != 1){
		status = "Probability map created";
	}
	if (LJ_mapID != 1){
		status = "Mask created";
	}
	if (LJ_segID != 1){
		status = "Segmentation completed";
	}
	msg += "Status:       " + status +"\n";
	
	print(msg);

	Dialog.create("LungJ Status");
	Dialog.addMessage(msg);
	Dialog.show();
}

macro "Run LungJ [a]" {
	startup();
	run("Set Up LungJ");
	run("Create Probability Map [w]");
	//userHappy = false;
	//do while(!userHappy){
	  //run("Choose Threshold");
	  run("Create Mask [e]");
	  //userHappy = are you happy?
	//}
	if (LJ_opt_MakeSegment){
		run("Create Segment [r]");
	}
	if (LJ_opt_MakeVideo){
		run("Render Video [t]");
	}
	ArrangeWindows();
}

macro "Run Silent [s]" {
	startup();
	showStatus("Initiating LungJ...");
	//print("\\Clear");
	LJ_srcFilename = getTitle;
	LJ_srcDirectory = getDirectory("image");
	LJ_srcID = getImageID();
	LJ_win_Height = getHeight();
	LJ_win_Width = getWidth();
	print("Initiated LungJ for " + LJ_srcFilename + " with " + LJ_clsName + ".");
	LJ_prbID = 1;
	LJ_mapID = 1;
	LJ_segID = 1;
	run("Create Probability Map [w]");
	run("Create Mask [e]");
	if (LJ_opt_MakeSegment){
		run("Create Segment [r]");
	}
	if (LJ_opt_MakeVideo){
		run("Render Video [t]");
	}
	ArrangeWindows();
}

macro "Run Batch [d]" {
	lstImages = getList("image.titles");
	for (i=0; i<lstImages.length; i++) {
		selectImage(i+1);
		run("Run Silent [s]");
	}
}

macro "Run Blocks"{
	dirin = getDirectory("Choose a Directory");
	dirout = getDirectory("Choose a Directory");

	Dialog.create("LungJ Status");
	Dialog.addMessage("input directory: "+dirin);
	Dialog.addMessage("output directory: "+dirout);
	Dialog.addNumber("size X", 2000, 0, 5, "px")
	Dialog.addNumber("size Y", 2000, 0, 5, "px")
	Dialog.addNumber("size Z", 2000, 0, 5, "px")
	Dialog.show();
	maxX = Dialog.getNumber();
	maxY = Dialog.getNumber();
	maxZ = Dialog.getNumber();

	for(z = 0; z < maxZ; z+=250){
		for(y = 0; y < maxY; y+=250){
			for(x = 0; x < maxX; x+=250){
				open(dirin+"\\"+z+"_"+y+"_"+x+".tif");
				run("Run Silent [s]");
				close("*");
			}
		}
	}
}

/*** INDIVIDUAL STEPS ***/

macro "Set Up LungJ [q]" {
	startup();
	showStatus("Initiating LungJ...");
	//print("\\Clear");
	print("Initiating LungJ...");
	/*__start__*/
	LJ_srcFilename = getTitle;
	LJ_srcID = getImageID();
	selectClassifierdir();
	lstClassifiers = getClassifiers(LJ_clsDirectory);
	lstImages = getList("image.titles");
	Dialog.create("LungJ Options");
	Dialog.addMessage(LJ_srcFilename);
	Dialog.addChoice("Image:", lstImages, LJ_srcFilename);
	Dialog.addChoice("Classifier:", lstClassifiers, LJ_clsFilename);
	Dialog.addSlider("Threshold:", 0.00, 1.00, LJ_Threshold);
	Dialog.addCheckbox("Autosave",LJ_opt_Autosave);
	Dialog.addCheckbox("Create Segmentation",LJ_opt_MakeSegment);
	Dialog.addCheckbox("Create Video",LJ_opt_MakeVideo);
	Dialog.show();
	LJ_srcFilename = Dialog.getChoice();
	LJ_clsFilename = Dialog.getChoice();
	LJ_Threshold = Dialog.getNumber();
	LJ_opt_Autosave = Dialog.getCheckbox();
	LJ_opt_MakeSegment = Dialog.getCheckbox();
	LJ_opt_MakeVideo = Dialog.getCheckbox();

	//LJ_srcFilename = getTitle;
	selectWindow(LJ_srcFilename);
	LJ_srcDirectory = getDirectory("image");
	LJ_srcID = getImageID();
	LJ_win_Height = getHeight();
	LJ_win_Width = getWidth();
	
	LJ_prbID = 1;
	LJ_mapID = 1;
	LJ_segID = 1;
	savePreferences();
	/*__end__*/
	print("Initiated LungJ for " + LJ_srcFilename + " with " + LJ_clsName + ".");
	showStatus("Initiated LungJ for " + LJ_srcFilename + " with " + LJ_clsName + ".");
}

macro "Create Probability Map [w]" {
	startup();
	showStatus("Segmenting " + LJ_srcFilename + " with " + LJ_clsName + ".");
	LJ_srcID = confirmImg(LJ_srcID,LJ_srcFilename,"original image",false);
	//__start__
	selectImage(LJ_srcID);
	run("Trainable Weka Segmentation", "open=["+LJ_srcDirectory+"\\"+LJ_srcFilename+"]");
	wait(1000);
	selectWindow("Trainable Weka Segmentation v2.2.0");
	//setLocation(LJ_win_Left,LJ_win_Top + LJ_win_Spacing*2 + LJ_win_Height);
	call("trainableSegmentation.Weka_Segmentation.loadClassifier", LJ_clsDirectory+"\\"+LJ_clsFilename);
	wait(1000);
	selectWindow("Trainable Weka Segmentation v2.2.0");
	//call("trainableSegmentation.Weka_Segmentation.applyClassifier", LJ_srcDirectory, LJ_srcFilename, "showResults=true", "storeResults=false", "probabilityMaps=true", "");
	call("trainableSegmentation.Weka_Segmentation.getProbability");
	/*__post processing__*/
	showStatus("Post processing...");
	selectWindow("Trainable Weka Segmentation v2.2.0");  //-> to ensure that a classified image was created.
	selectWindow("Probability maps");
	run("Slice Remover", "first=2 last=500 increment=2");

	/*__tidying up__*/
	selectWindow("Trainable Weka Segmentation v2.2.0");
	close();
	list = getList("image.titles");
	for (i=0; i<list.length; i++) {
		if (list[i] == LJ_srcFilename){
			selectImage(i+1);
			testID = getImageID();
			if (testID != LJ_srcID){
				close();
			}
		}
	}
	//__end__
	if (LJ_opt_Autosave){
		probLJ_srcFilename = "autosave_"+LJ_srcFilename+"_"+LJ_clsName+"_probability.tif";
		selectWindow("Probability maps");
		saveAs("Tiff", LJ_srcDirectory+"\\"+probLJ_srcFilename);
	}
	rename("Probability Map");
	LJ_prbID = getImageID();
	LJ_mapID = 1;
	LJ_segID = 1;
	showStatus("Probability map created.");
}

macro "Choose Threshold" {
	startup();
	Dialog.create("Image Threshold");
	Dialog.addSlider("Probability:", 0.00, 1.00, LJ_Threshold);
	Dialog.show();
	LJ_Threshold = Dialog.getNumber();
	savePreferences();
}

macro "Create Mask [e]" {
	startup();
	showStatus("Creating mask...");
	LJ_prbID = confirmImg(LJ_prbID,LJ_prbFilename,"probability map",false);
	//__start__
	selectImage(LJ_prbID);
	run("Duplicate...", "duplicate");
	LJ_mapID = getImageID();
	if (LJ_opt_UseDefaultBin){
		setOption("BlackBackground", false);
		run("Make Binary", "method=Default background=Dark black");
	}else{
		run("8-bit");
		getMinAndMax(min, max);
		thu = LJ_Threshold*max;
		run("Max...","value="+thu+" stack");
		thl = thu-1;
		run("Min...","value="+thl+" stack");
		run("Subtract...", "value="+thl+" stack");
		thm = (max/0.01);
		run("Multiply...", "value="+thm+" stack");
	}
	//waitForUser("confirm");
	//selectImage(LJ_mapID);
	//run("Divide...", "value=255 stack");
	//setThreshold(1,1);
	//__end__
	if (LJ_opt_Autosave){
		LJ_mapFilename = "autosave_"+LJ_srcFilename+"_"+LJ_clsName+"_th"+LJ_Threshold+"_mask.tif";
		selectImage(LJ_mapID);
		saveAs("Tiff", LJ_srcDirectory+"\\"+LJ_mapFilename);
	}
	rename("Segmentation Mask");
	LJ_mapID = getImageID();
	LJ_segID = 1;
	showStatus("Mask created.");
}

macro "Create Segment [r]" {
	startup();
	showStatus("Creating segmented image...");
	LJ_srcID = confirmImg(LJ_srcID,LJ_srcFilename,"original image",true);
	LJ_mapID = confirmImg(LJ_mapID,LJ_mapFilename,"mask",false);
	//__start__
	selectImage(LJ_mapID);
	LJ_mapFilename = getTitle;
	getMinAndMax(min, max);
	run("Divide...", "value="+max+" stack");
	imageCalculator("Multiply create stack", LJ_srcFilename,LJ_mapFilename);
	selectImage(LJ_mapID);
	run("Multiply...", "value="+max+" stack");
	//__end__
	if (LJ_opt_Autosave){
		LJ_segFilename = "autosave_"+LJ_srcFilename+"_"+LJ_clsName+"_th"+LJ_Threshold+"_segmentation.tif";
		selectWindow("Result of "+LJ_srcFilename);
		saveAs("Tiff", LJ_srcDirectory+"\\"+LJ_segFilename);
	}
	rename("Segmented Image");
	LJ_segID = getImageID();
	showStatus("Segmentation completed.");
}

macro "Render Video [t]" {
	startup();
	showStatus("Rendering video...");
	LJ_mapID = confirmImg(LJ_mapID,LJ_mapFilename,"mask",false);
	//__start__
	selectImage(LJ_mapID);
	imgname = getTitle;
	run("3D Viewer");
	call("ij3d.ImageJ3DViewer.setCoordinateSystem", "false");
	call("ij3d.ImageJ3DViewer.add", imgname, "Red", imgname, "0", "true", "true", "true", "2", "0");
	wait(1000);
	call("ij3d.ImageJ3DViewer.setColor", "200", "0", "0");
	wait(1000);
	call("ij3d.ImageJ3DViewer.record360");
	//selectWindow("ImageJ 3D Viewer");
	//close();
	selectWindow("Movie");
	doCommand("Start Animation [\\]");
	//__end__
	if (LJ_opt_Autosave){
		LJ_movFilename = "autosave_"+LJ_srcFilename+"_"+LJ_clsName+"_th"+LJ_Threshold+"_movie.avi";
		selectWindow("Movie");
		run("AVI... ", "frame=6 save=["+LJ_srcDirectory+"\\"+LJ_movFilename+"]");
	}
	rename("3D Movie");
	LJ_movID = getImageID();
	showStatus("Rendering completed.");
}

macro "Concatenate segmentations [f]" {
	startup();
	items = getList("image.titles");
	Dialog.create("LungJ Concatenate");
	Dialog.addMessage("choose probability matrices or masks");
	Dialog.addChoice("tissue*", items);
	Dialog.addChoice("vessels*", items);
	//Dialog.addChoice("background", items);
	Dialog.show();
	imgTis = Dialog.getChoice();
	imgPrt = Dialog.getChoice();
	//imgBg  = Dialog.getChoice();
	selectWindow(imgTis);
	run("Duplicate...", "duplicate");
	//selectWindow(imgTis+"-1");
	run("Invert", "stack");
	rename("LJ_background");
	
	imageCalculator("Subtract create stack", imgTis, imgPrt);
	selectWindow("Result of "+imgTis);
	rename("LJ_tissue");
	
	
	run("Concatenate...", "  title=[Segmented Tissue] keep open image1=LJ_background image2=LJ_tissue image3="+imgPrt+" image4=[-- None --]");
	run("Temporal-Color Code", "lut=LJpenta start=1 end=3 create");
	selectWindow("MAX_colored");
	rename("Pentachrome");
	selectWindow("color time scale");
	close();
	selectWindow("LJ_background");
	close();
	selectWindow("LJ_tissue");
	close();
}

/*** MISC ***/
function ArrangeWindows() {
	prmLeft = LJ_win_Left;
	secLeft = prmLeft;
	list = getList("image.titles");
	for (i=0; i<list.length; i++) {
		selectImage(i+1);
		tempID = getImageID();
		if (tempID == LJ_srcID || tempID == LJ_prbID || tempID == LJ_mapID || tempID == LJ_segID){
			setLocation(prmLeft, LJ_win_Top);
			doCommand("Start Animation [\\]");
			tempWidth = getWidth();
			LJ_win_Height = getHeight();
			prmLeft += LJ_win_Spacing + tempWidth;
		}else{
			setLocation(secLeft, LJ_win_Top + LJ_win_Height);
			tempWidth = getWidth();
			secLeft += LJ_win_Spacing + tempWidth;
		}
	}
}

function confirmImg(imgID,imgFilename,type,enforce) {
	if (imgID == 1){
		if (enforce){
			print("ERROR: undefined "+type+".");
		    exit("missing "+type+".");
		}else{
		    print("WARNING: undefined "+type+".");
		    print("will use current image instead.");
		    imgID = getImageID();
		}
	}
	if (!isOpen(imgID)){
		print("WARNING: "+type+" was closed.");
		print("Attempt to open "+type+" from autosave");
		IJ.redirectErrorMessages();
		open(LJ_srcDirectory + "\\" + imgFilename);
		if (!isOpen(imgID)){
			if (enforce){
				print("ERROR: couldn't load "+type+".");
		    	exit("missing "+type+".");
			}else{
				print("WARNING: couldn't load "+type+".");
				print("will use current image instead.");
		    	imgID = getImageID();
			}
		}
	}
	return imgID
}

/*** MAINTAINANCE ***/

function startup() {
	if (LJ_isNew){
		print("Starting up LungJ");
		loadPreferences();
		LJ_isNew = false;
		print("LungJ start up completed");
	}
}

function savePreferences() {
	print("Saving Preferences");
	prefFile = LJ_dir + "/preferences.txt";
	f = File.open(prefFile);
	msg = LJ_version + "\n" + LJ_clsDirectory + "\n" + LJ_clsFilename + "\n" + LJ_Threshold + "\n" + LJ_opt_Autosave + "\n" + LJ_opt_MakeVideo + "\n" + LJ_opt_MakeSegment;
	print(f,msg);
	File.close(f);
	print("Saved Preferences");
}

function loadPreferences() {
	print("Loading Preferences");
	print("macros: " + getDirectory("macros"));
	prefFile = LJ_dir + "/preferences.txt";
	isPref = File.exists(prefFile);
	if (!isPref) {
		print("INFO: no preferences found");
		savePreferences();
		exit("ERROR: Please run previous command again.");
	}
	msg = File.openAsString(prefFile);
	lines = split(msg,"\n");
	if (lines.length <= 0) {
		print("WARNING: Corrupted user preferences.");
		savePreferences();
		print("ERROR: Please run previous command again.");
		exit("ERROR: Please run previous command again.");
	}
	if (LJ_version != lines[0]) {
		print("WARNING: Preferences from other version (" + lines[0] + ") of LungJ (currently " + LJ_version +") are reset");
		savePreferences();
		print("ERROR: Please run previous command again.");
		exit("ERROR: Please run previous command again.");
	}
	if (lines.length != 7) {
		print("WARNING: Corrupted user preferences.");
		savePreferences();
		print("ERROR: Please run previous command again.");
		exit("ERROR: Please run previous command again.");
	}
	LJ_clsDirectory    = lines[1];
	LJ_clsFilename     = lines[2];
	LJ_Threshold       = parseFloat(lines[3]);
	LJ_opt_Autosave    = ("1" == lines[4]);
	LJ_opt_MakeVideo   = ("1" == lines[5]);
	LJ_opt_MakeSegment = ("1" == lines[6]);
	print("Loaded Preferences");
}

function getClassifiers(dir){
	list = getFileList(dir);
	count = 1;
	for (i=0; i<list.length; i++) {
		if (endsWith(list[i], "/"))
			list[i] = "";
		else if (endsWith(list[i], ".model"))
			count++;
		else
	    	list[i] = "";
	}
	items = newArray(count);
	count = 0;
	for (i=0; i<list.length; i++) {
		if (list[i] != ""){
			items[count] = list[i];
			count++;
		}
	}
	return items;
}

function selectClassifierdir() {
	showStatus("Waiting for user input...");
	LJ_clsDirectory = getDirectory("Choose Source Directory");
	showStatus("Getting Classifier...");
	items = getClassifiers(LJ_clsDirectory);
}
 
